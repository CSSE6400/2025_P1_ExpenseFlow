name: App Deployment

on:
  workflow_dispatch:
    inputs:
      aws_access_key_id:
        type: string
        required: true
      aws_secret_access_key:
        type: string
        required: true
      aws_session_token:
        type: string
        required: true
      aws_region:
        type: string
        required: true
        default: "us-east-1"
      branch:
        description: "Branch to run workflow on"
        required: true
        default: "main"

env:
  ECS_API_NAME: expenseflow-api
  ECR_API_URI: ${{ secrets.ECR_API_URI }}

  ECS_UI_NAME: expenseflow-ui
  ECR_UI_URI: ${{ secrets.ECR_UI_URI }}

jobs:
  backend_deploy:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    if: github.event.inputs.branch == 'main'
    steps:
      - uses: levibostian/action-hide-sensitive-inputs@v1

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.aws_access_key_id }}
          aws-secret-access-key: ${{ github.event.inputs.aws_secret_access_key }}
          aws-session-token: ${{ github.event.inputs.aws_session_token }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build and push docker image
        run: |
          IMAGE_URI=${{ env.ECR_API_URI }}:latest
          docker build -t $IMAGE_URI ./ui
          docker push $IMAGE_URI
        working-directory: api

      - name: Update ECS task definition
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_API_NAME}} \
            > task-def.json

          jq --arg IMAGE_URI "${{ env.ECR_API_URI }}:latest" \
            '.taskDefinition.containerDefinitions[0].image = $IMAGE_URI' task-def.json > new-task-def.json

          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json > task-def-register.json

          echo "::set-output name=revision_arn::$(jq -r '.taskDefinition.taskDefinitionArn' task-def-register.json)"
        shell: bash

      - name: Update ECS service with new task definition revision
        run: |
          aws ecs update-service \
            --cluster expenseflow \
            --service ${{env.ECS_API_NAME}} \
            --task-definition ${{ steps.task-def.outputs.revision_arn }}

  frontend_deploy:
    name: Deploy Frontend to ECS
    runs-on: ubuntu-latest
    if: github.event.inputs.branch == 'main'
    steps:
      - uses: levibostian/action-hide-sensitive-inputs@v1

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.aws_access_key_id }}
          aws-secret-access-key: ${{ github.event.inputs.aws_secret_access_key }}
          aws-session-token: ${{ github.event.inputs.aws_session_token }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build and push docker image
        run: |
          IMAGE_URI=${{ env.ECR_UI_URI }}:latest
          docker build -t $IMAGE_URI ./ui
          docker push $IMAGE_URI
        working-directory: ui

      - name: Update ECS task definition
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_UI_NAME}} \
            > task-def.json

          jq --arg IMAGE_URI "${{ env.ECR_UI_URI }}:latest" \
            '.taskDefinition.containerDefinitions[0].image = $IMAGE_URI' task-def.json > new-task-def.json

          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json > task-def-register.json

          echo "::set-output name=revision_arn::$(jq -r '.taskDefinition.taskDefinitionArn' task-def-register.json)"
        shell: bash

      - name: Update ECS service with new task definition revision
        run: |
          aws ecs update-service \
            --cluster expenseflow \
            --service ${{env.ECS_UI_NAME}} \
            --task-definition ${{ steps.task-def.outputs.revision_arn }}
