name: Backend Deployment

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  #   backend_lint_and_format:
  #     name: Run linter and formatter across backend codebase
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Checkout repo
  #         uses: actions/checkout@v4

  #       - name: Install Ruff
  #         uses: astral-sh/ruff-action@v3
  #         with:
  #           args: "--version"
  #           src: "api"

  #       - name: Run Ruff Formatter
  #         run: ruff format --diff api

  #       - name: Run Ruff Linter
  #         run: ruff check --fix api

  backend_static_type_checking:
    name: Run mypy on backend codebase to do type checking.
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run mypy
        run: uv run mypy .
  backend_tests:
    name: Runs backend tests and generates a coverage report for them.
    runs-on: ubuntu-latest
    needs: backend_static_type_checking
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat <<EOF > .env
          POSTGRES_USER=admin
          POSTGRES_PASSWORD=password
          POSTGRES_DB=expense_db
          AUTH0_DOMAIN=an-auth0-domain
          JWT_AUDIENCE=a-jwt-audience
          AUTH0_CLIENT_ID=a-auth0-client-id
          EOF

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install the project
        run: uv sync --locked --all-extras --dev
        working-directory: api

      - name: Get test DB started with docker compose
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: "./docker-compose.yml"
          services: database

      - name: Run tests with coverage
        run: |
          uv run pytest --cov=expenseflow --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html:htmlcov
        working-directory: api

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: ./api/coverage.xml

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: ./api/htmlcov
  backend_build:
    name: Build the backend.
    runs-on: ubuntu-latest
    needs: backend_tests

  backend_deploy:
    name: Deploy the backend.
    runs-on: ubuntu-latest
    needs: backend_build
