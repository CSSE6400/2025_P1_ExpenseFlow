services:
  database:
    image: postgres
    container_name: database
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d expense_db" ]
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
    volumes:
      - db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432

  backend:
    build: api
    ports:
      - 8080:8080
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
    env_file:
      - .env
    environment:
      - DB_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - FRONTEND_URL=frontend:3000
      - PLUGIN_CONFIG_PATH=local_plugin_config.yml
      - SENTRY_DSN=https://f0e2babc247dfbc9bef0b233664acab0@o4509370795032576.ingest.us.sentry.io/4509370811219968
    depends_on:
      database:
        condition: service_healthy
        restart: true

  frontend:
    build: ui
    ports:
      - 3000:3000
    env_file:
      - .env
    environment:
      - BACKEND_BASE_URL=backend:8080
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
    healthcheck:
      test: curl --fail http://localhost:3000/health || exit 1
      interval: 5s
      retries: 5
      start_period: 20s
      timeout: 10s
    depends_on:
      database:
        condition: service_healthy
        restart: true
      backend:
        condition: service_healthy
        restart: true

volumes:
  db-data:
